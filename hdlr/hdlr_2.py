from aiogram import Router, F
from random import randint
from aiogram import types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from config_imagination import ConfigBox
from aiogram.utils.formatting import (
    Bold, as_list, as_marked_section, as_key_value, HashTag
)

router = Router()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = "\n "
    help_text += ""
    help_text += "\n"
    help_text += ""
    content = as_list(
        as_marked_section(
            Bold("–ò—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é!"),
            as_key_value("–í—Å–µ–≥–æ –¥–≤–∞ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞", 2),
            marker="  ",
        ),
        as_marked_section(
            Bold("1. –ü–∏—à–µ—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞–¥–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏ —è –Ω–∞—Ä–∏—Å—É—é."),
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("2. –ï—Å–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É, –∏ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –µ—Å—Ç—å –ù–ï –æ—Ç–≤–µ—á–∞–ª –Ω–∞ –Ω–µ–≥–æ, –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–º–≤–æ–ª @ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ."),
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –∞–¥—Ä–µ—Å–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–¥–Ω–æ–º—É –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n –¢–æ–≥–¥–∞ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –º–µ—à–∞—Ç—å —Å–≤–æ–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏.",
            marker="‚úÖ ",
        ),
        
        HashTag("#OpenAI Assistant"),
        sep="\n\n",
    )
    await message.reply(**content.as_kwargs())

@router.message(Command("control"))
async def cmd_control(message: types.Message):
    for _ in ConfigBox.dialog_messages.keys() :
        await message.answer(f"In chat {_}: {len(ConfigBox.dialog_messages[_])} messages.\n")

@router.message(Command("reply"))
async def cmd_reply(message: types.Message):
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å "–æ—Ç–≤–µ—Ç–æ–º"')

@router.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")

@router.message(F.text.lower() == "—Å –ø—é—Ä–µ—à–∫–æ–π")
async def with_puree(message: types.Message):
    await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!", reply_markup=types.ReplyKeyboardRemove())

@router.message(F.text.lower() == "–±–µ–∑ –ø—é—Ä–µ—à–∫–∏")
async def without_puree(message: types.Message):
    await message.reply("–¢–∞–∫ –Ω–µ–≤–∫—É—Å–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())

@router.message(Command("random"))
async def cmd_random(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∂–º–∏ –º–µ–Ω—è",
        callback_data="random_value")
    )
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "random_value")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer(str(randint(1, 10)))
    await callback.answer(
        text="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º!",
        show_alert=True
    )
    # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ await callback.answer()